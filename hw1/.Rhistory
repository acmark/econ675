install.packages("ggplot2")
source('~/Downloads/Econ675-Fall2018-Assignment1_Q3.R', echo=TRUE)
source('~/Downloads/Econ675-Fall2018-Assignment1_Q3.R', echo=TRUE)
lol <- diag(rep(5))
View(lol)
View(lol)
source('~/Dropbox/Phd_Coursework/Econ675/hw2/hw2.R', echo=TRUE)
install.packages("foreach")
source('~/Dropbox/Phd_Coursework/Econ675/hw2/hw2.R', echo=TRUE)
source('~/Dropbox/Phd_Coursework/Econ675/hw2/hw2.R', echo=TRUE)
source('~/Dropbox/Phd_Coursework/Econ675/hw2/hw2.R', echo=TRUE)
source('~/Dropbox/Phd_Coursework/Econ675/hw2/hw2.R', echo=TRUE)
source('~/Dropbox/Phd_Coursework/Econ675/hw2/h2_1.R', echo=TRUE)
# RUN SIMULATIONS - TOTAL RUNTIME APPROX 13-15 MINS
IMSE_LI <- foreach(h=h.list, .combine='cbind') %:%
foreach(i=1:1000, .combine='c') %do% {
imse.li(X.mat[,i],h)
}
IMSE_comb <- as.data.frame(cbind(h.list,colMeans(IMSE_LI),colMeans(IMSE_LO)))
colnames(IMSE_comb) <- c("h", "IMSE_li","IMSE_lo")
g <- melt(IMSE_comb, id="h")
ggplot(g) +
geom_line(aes(x=h, y=value, colour=variable)) +
scale_colour_manual(values=c("blue","green")) +
labs(title="Simulated IMSEs for Full and LOO Samples",y="IMSE") +theme(plot.title = element_text(hjust = 0.5))
IMSE_comb <- as.data.frame(cbind(h.list,colMeans(IMSE_LI),colMeans(IMSE_LO)))
colnames(IMSE_comb) <- c("h", "IMSE_li","IMSE_lo")
g <- melt(IMSE_comb, id="h")
IMSE_comb <- as.data.frame(cbind(h.list,colMeans(IMSE_LI),colMeans(IMSE_LO)))
imse.lo
IMSE_comb <- as.data.frame(cbind(h.list,colMeans(IMSE_LI),colMeans(IMSE_LO)))
IMSE_LO <- foreach(h=h.list, .combine='cbind') %:%
foreach(i=1:1000, .combine='c') %do% {
imse.lo(X.mat[,i],h)
}
# Plot IMSEs
IMSE_comb <- as.data.frame(cbind(h.list,colMeans(IMSE_LI),colMeans(IMSE_LO)))
colnames(IMSE_comb) <- c("h", "IMSE_li","IMSE_lo")
g <- melt(IMSE_comb, id="h")
ggplot(g) +
geom_line(aes(x=h, y=value, colour=variable)) +
scale_colour_manual(values=c("blue","green")) +
labs(title="Simulated IMSEs for Full and LOO Samples",y="IMSE") +theme(plot.title = element_text(hjust = 0.5))
source('~/Dropbox/Phd_Coursework/Econ675/hw2/hw2.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
plot.data = melt(as.data.frame(cbind(x.grid,y.hats,y.true)),id="x.grid")
ggplot(plot.data,aes(x=x.grid,y=value,color=variable))+
geom_line(linetype = "dashed")+geom_point()+
labs(title="True and Series Estimate of the Regression function")+
labs(y=expression(paste(mu(x))),x=expression(paste(x))) +theme(plot.title = element_text(hjust = 0.5))+
scale_color_manual(values=c("black", "blue"),labels = c(expression(paste(hat(mu))),expression(paste(mu))))
source('~/.active-rstudio-document', echo=TRUE)
# Compute averages over M
opt.beta  <- rowMeans(results.beta)
opt.se    <- rowMeans(results.se)
# Compute regressors for each number in the x.grid
X.new     <- t(sapply(x.grid, function(x) return(cbind(1,x,x^2,x^3,x^4,x^5,x^6,x^7))))
# Compute y.hats
y.hats    <- as.numeric(X.new%*%as.vector(opt.beta))
# Write the true regression function and compute for x.grid values
f.true <- function(x) exp(-0.1*(4*x-1)^2)*sin(5*x)
y.true <- f.true(x.grid)
# MAKE PLOT
# Get data in right format for ggplot
plot.data = melt(as.data.frame(cbind(x.grid,y.hats,y.true)),id="x.grid")
ggplot(plot.data,aes(x=x.grid,y=value,color=variable))+
geom_line(linetype = "dashed")+geom_point()+
labs(title="True and Series Estimate of the Regression function")+
labs(y=expression(paste(mu(x))),x=expression(paste(x))) +theme(plot.title = element_text(hjust = 0.5))+
scale_color_manual(values=c("black", "blue"),labels = c(expression(paste(hat(mu))),expression(paste(mu))))
# Compute regressors for each number in the x.grid
X.der     <- t(sapply(x.grid, function(x) return(cbind(0,1,2*x,3*x^2,4*x^3,5*x^4,6*x^5,7*x^6))))
# Compute y.hats
dy.hats    <- as.numeric(X.der%*%as.vector(opt.beta))
# Write the true derivative function and compute for x.grid values
df.true <- function(x) exp(-0.1*(4*x-1)^2)*(5*cos(5*x)-0.8*sin(5*x)*(4*x-1))
dy.true <- df.true(x.grid)
# MAKE PLOT
dplot.data = melt(as.data.frame(cbind(x.grid,dy.hats,dy.true)),id="x.grid")
ggplot(dplot.data,aes(x=x.grid,y=value,color=variable))+
geom_line(linetype = "dashed")+geom_point()+
labs(title="True and Series Estimate of the Derivative Regression Function")+
labs(y=expression(paste(mu(x))),x=expression(paste(x))) +theme(plot.title = element_text(hjust = 0.5))+
scale_color_manual(values=c("black", "blue"),labels = c(expression(paste(d*hat(mu)/dx)),expression(paste(d*mu/dx))))
# Write function to compute squared second derivative of normal density
d2normsq  <- function(x, mu=0, v=1) {
(dnorm(x,mu,sqrt(v))*(((x-mu)/v)^2-1/v))^2
}
# Write function to compute ROT bandwidth for random sample
h.rot <- function(x.rand){
# Compute sample mean and variance
mu = mean(x.rand)
v  = var(x.rand)
# Compute second derivative of normal density
k1     <-integrate(d2normsq,mu=mu,v=v, -Inf, Inf)$val
# Compute ROT bandwidth
h <- ((1/N)*(1/k2)^2*(k3/k1))^(1/5)
}
# Run simulation using foreach
h.rot.vec <- foreach(i=1:1000, .combine='c') %do% h.rot(X.mat[,i])
# Run simulation using sapply - FASTER!
h.rot.vec2<- sapply(1:M,function(i) h.rot(X.mat[,i]))
# Compute mean h.rot.vec
mean(h.rot.vec2)
# Write function to compute squared second derivative of normal density
d2normsq  <- function(x, mu=0, v=1) {
(dnorm(x,mu,sqrt(v))*(((x-mu)/v)^2-1/v))^2
}
# Write function to compute ROT bandwidth for random sample
h.rot <- function(x.rand){
# Compute sample mean and variance
mu = mean(x.rand)
v  = var(x.rand)
# Compute second derivative of normal density
k1     <-integrate(d2normsq,mu=mu,v=v, -Inf, Inf)$val
# Compute ROT bandwidth
h <- ((1/N)*(1/k2)^2*(k3/k1))^(1/5)
}
# Run simulation using foreach
h.rot.vec <- foreach(i=1:1000, .combine='c') %do% h.rot(X.mat[,i])
# Run simulation using sapply - FASTER!
h.rot.vec2<- sapply(1:M,function(i) h.rot(X.mat[,i]))
# Compute mean h.rot.vec
mean(h.rot.vec2)
source('~/Dropbox/Phd_Coursework/Econ675/hw2/h2_1.R', echo=TRUE)
source('~/Dropbox/Phd_Coursework/Econ675/hw2/hw2_3_r.R', echo=TRUE)
k.opt <- K.CV(tt, X, Y)
source('~/Dropbox/Phd_Coursework/Econ675/hw2/hw2_3_r.R', echo=TRUE)
write.table(round(table,3), "PhD_Coursework/econ675/hw2/partial_linear.txt", sep=" & ", eol="\\\\ \n", col.names = FALSE, row.names = FALSE)
write.table(round(table,3), "partial_linear.txt", sep=" & ", eol="\\\\ \n", col.names = FALSE, row.names = FALSE)
